@page "/configuracao"

@using AgendaPessoal.Model
@using AgendaPessoal.Repository
@using AgendaPessoal;

@inject IConsulta_Local iConsultaLocal
@inject NavigationManager Navigation

<link rel="stylesheet" href="css/projetoFamilia/configuracao.css" />

<h4 class="titulo-configuracoes">Configurações De Perfil</h4>

<br />
<br />

<div>
    @if (usuarioModels != null)
    {
        <EditForm Model="@usuarioModel" OnValidSubmit="AtualizarUsuario">
            <DataAnnotationsValidator />

            <div class="text-center">
                <div class="mb-2">
                    <img src="@_userAvatar" @onclick="ExibirAcao" height="100" width="100" class="rounded-circle" />
                </div>
            </div>

            <br />

            <div class="form-group">
                <input class="form-control" type="hidden" @bind-value="@usuarioModel.IdUsuario">
            </div>

            <br />

            <div class="form-group">
                <label id="fomrLabel">Nome:</label>
                <input class="form-control" @bind-value="@usuarioModel.Nome" placeholder="Primeiro Nome">
            </div>

            <br />

            <div class="form-group">
                <label id="fomrLabel">Sobrenome:</label>
                <input class="form-control" @bind-value="@usuarioModel.Sobrenome" placeholder="Sobrenome">
            </div>

            <br />

            <br />
            <br />

            <div class="text-center mt-2">
                <button class="btn btn-success" type="submit">
                    <span class="@_spinnerClass" role="status" aria-hidden="true"></span>
                    Atualizar
                </button>
            </div>
        </EditForm>
    }
</div>

<br />
<br />
<br />

@code {
    UsuarioModel usuarioModel = new();

    private List<UsuarioModel> usuarioModels;

    private UsuarioModel usuario;
    private UsuarioModel UsuarioImage;

    private string nomeUsuario;
    private string _spinnerClass = "";
    private string _imageBase64Data;
    private string _userAvatar;

    protected async override Task OnInitializedAsync()
    {
        try
        {
            usuarioModels = await iConsultaLocal.GetAllUsuario();

            if (usuarioModels != null && usuarioModels.Count > 0)
            {

                if (usuarioModels[0].UserAvatar != null)
                {
                    var trazerImagem = GetImageBase64(usuarioModels[0]);
                    _userAvatar = trazerImagem;
                    nomeUsuario = usuarioModels[0].Nome;
                }
                else
                {
                    _userAvatar = "images/user.png";
                    nomeUsuario = usuarioModels[0].Nome;
                }

                var verificar = usuarioModels.FirstOrDefault(x => x.Nome == nomeUsuario);

                if (verificar != null)
                {
                    foreach (var item in usuarioModels)
                    {
                        @if (nomeUsuario == @item.Nome)
                        {
                            var response = await iConsultaLocal.GetUsuarioByID(item.IdUsuario);

                            if (response != null)
                            {
                                usuarioModel.IdUsuario = response.IdUsuario;
                                usuarioModel.Nome = response.Nome;
                                usuarioModel.Sobrenome = response.Sobrenome;
                            }
                        }
                    }
                }    
            }
            else
            {
                _userAvatar = "images/user.png";
            }
        }
        catch (Exception)
        {
            throw;
        }
    }

    public async void AtualizarUsuario()
    {
        try
        {
            _spinnerClass = "spinner-border spinner-border-sm";

            bool resposta = await App.Current.MainPage.DisplayAlert("Atenção", "Deseja continuar?", "Sim", "Não");

            if (resposta)
            {
                usuarioModels = await iConsultaLocal.GetAllUsuario();

                if (usuarioModels.Count > 0)
                {
                    if (!string.IsNullOrWhiteSpace(_imageBase64Data))
                    {
                        // Converter a imagem em bytes
                        var imageBytes = Convert.FromBase64String(_imageBase64Data);

                        // Criar o objeto ImageModel
                        var imageModel = usuarioModel;
                        imageModel.IdUsuario = usuarioModel.IdUsuario;
                        imageModel.UserAvatar = imageBytes;
                        imageModel.Nome = usuarioModel.Nome;
                        imageModel.Sobrenome = usuarioModel.Sobrenome;
                        imageModel.NameImage = _userAvatar;

                        UsuarioImage = imageModel;
                    }
                    else
                    {
                        var imageModel = usuarioModel;
                        imageModel.IdUsuario = usuarioModel.IdUsuario;
                        imageModel.Nome = usuarioModel.Nome;
                        imageModel.Sobrenome = usuarioModel.Sobrenome;
                        imageModel.NameImage = _userAvatar;
                        imageModel.UserAvatar = usuarioModels[0].UserAvatar;

                        usuario = imageModel;
                    }

                    // Código a ser executado se a resposta for "Sim"
                    int linhasAfetadas;

                    if (UsuarioImage != null)
                    {
                        linhasAfetadas = await iConsultaLocal.UpdateUsuario(UsuarioImage);
                    }
                    else
                    {
                        linhasAfetadas = await iConsultaLocal.UpdateUsuario(usuario);
                    }

                    if (linhasAfetadas > 0)
                    {
                        // A atualização foi bem-sucedida
                        await App.Current.MainPage.DisplayAlert("Atenção", "atualização foi bem-sucedida!", "OK");
                    }
                    else
                    {
                        // A atualização falhou
                        await App.Current.MainPage.DisplayAlert("Atenção", "atualização falhou!", "OK");
                    }
                }
                else
                {
                    if (!string.IsNullOrWhiteSpace(_imageBase64Data))
                    {
                        // Converter a imagem em bytes
                        var imageBytes = Convert.FromBase64String(_imageBase64Data);

                        // Criar o objeto ImageModel
                        var imageModel = new UsuarioModel
                            {
                                UserAvatar = imageBytes,
                                Nome = usuarioModel.Nome,
                                Sobrenome = usuarioModel.Sobrenome,
                                NameImage = _userAvatar
                            };

                        int responseUsuario = await iConsultaLocal.AddUsuario(imageModel);

                        if (responseUsuario > 0)
                        {
                            await App.Current.MainPage.DisplayAlert("Sucesso", "Usuario Registrado!", "OK");
                            Navigation.NavigateTo("/");
                        }
                        else
                        {
                            await App.Current.MainPage.DisplayAlert("Erro", "Cliente não registrado!", "OK");
                        }
                    }
                    else
                    {
                        var imageModel = new UsuarioModel
                            {
                                Nome = usuarioModel.Nome,
                                Sobrenome = usuarioModel.Sobrenome
                            };

                        int responseUsuario = await iConsultaLocal.AddUsuario(imageModel);

                        if (responseUsuario > 0)
                        {
                            await App.Current.MainPage.DisplayAlert("Sucesso", "Usuario Registrado!", "OK");
                            Navigation.NavigateTo("/");
                        }
                        else
                        {
                            await App.Current.MainPage.DisplayAlert("Erro", "Cliente não registrado!", "OK");
                        }
                    }
                }
            }
            else
            {
                // Código a ser executado se a resposta for "Não"
            }

            _spinnerClass = "";
            this.StateHasChanged();
        }
        catch (Exception)
        {
            throw;
        }
    }

    private async void ExibirAcao()
    {
        try
        {
            string response = await App.Current.MainPage.DisplayActionSheet("Selecionar a opção", "OK", null, "Tirar foto", "Add Foto");

            if (response == "Tirar foto")
            {
                if (_userAvatar != "images/user.png")
                {
                    _userAvatar = "images/user.png";
                    _imageBase64Data = null;
                }
            }
            else if (response == "Add Foto")
            {
                var photo = await MediaPicker.Default.PickPhotoAsync();
                if (photo != null)
                {
                    using (var stream = await photo.OpenReadAsync())
                    {
                        var memoryStream = new MemoryStream();
                        await stream.CopyToAsync(memoryStream);
                        var imageBytes = memoryStream.ToArray();

                        // Converter os bytes em uma string base64 para exibir a imagem na tela
                        _userAvatar = string.Format("data:image/png;base64,{0}", Convert.ToBase64String(imageBytes));

                        // Armazenar a string base64 para ser usada posteriormente na validação
                        _imageBase64Data = Convert.ToBase64String(imageBytes);
                        this.StateHasChanged();
                    }
                }
            }
        }
        catch (Exception)
        {
            throw;
        }
    }

    public string GetImageBase64(UsuarioModel usuario)
    {
        try
        {
            var imageData = usuario.UserAvatar;
            var imageBase64 = Convert.ToBase64String(imageData);
            return string.Format("data:image/png;base64,{0}", imageBase64);
        }
        catch (Exception)
        {
            throw;
        }
    }
}
